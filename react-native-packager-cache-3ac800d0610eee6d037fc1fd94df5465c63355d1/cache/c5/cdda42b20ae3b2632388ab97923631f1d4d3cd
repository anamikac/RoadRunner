Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index = require('./../node_modules/react-transform-hmr/lib/index.js');

var _index2 = _interopRequireDefault(_index);

var _jsxFileName = '/Mine/learn/RoadRunner/js/ButtonSubmit.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Dimensions = require('Dimensions');

var _Dimensions2 = _interopRequireDefault(_Dimensions);

var _reactNative = require('react-native');

var _reactNativeRouterFlux = require('react-native-router-flux');

var _loading = require('../images/loading.gif');

var _loading2 = _interopRequireDefault(_loading);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
	ButtonSubmit: {
		displayName: 'ButtonSubmit'
	}
};

var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
	filename: '/Mine/learn/RoadRunner/js/ButtonSubmit.js',
	components: _components,
	locals: [module],
	imports: [_react3.default]
});

function _wrapComponent(id) {
	return function (Component) {
		return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
	};
}

var DEVICE_WIDTH = _Dimensions2.default.get('window').width;
var DEVICE_HEIGHT = _Dimensions2.default.get('window').height;
var MARGIN = 40;

var ButtonSubmit = _wrapComponent('ButtonSubmit')(function (_Component) {
	_inherits(ButtonSubmit, _Component);

	function ButtonSubmit() {
		_classCallCheck(this, ButtonSubmit);

		var _this = _possibleConstructorReturn(this, (ButtonSubmit.__proto__ || Object.getPrototypeOf(ButtonSubmit)).call(this));

		_this.state = {
			isLoading: false
		};

		_this.buttonAnimated = new _reactNative.Animated.Value(0);
		_this.growAnimated = new _reactNative.Animated.Value(0);
		_this._onPress = _this._onPress.bind(_this);
		return _this;
	}

	_createClass(ButtonSubmit, [{
		key: '_onPress',
		value: function _onPress() {
			var _this2 = this;

			if (this.state.isLoading) {
				console.log("anamika");
				return;
			}

			this.setState({ isLoading: true });
			_reactNative.Animated.timing(this.buttonAnimated, {
				toValue: 1,
				duration: 200,
				easing: _reactNative.Easing.linear
			}).start();

			setTimeout(function () {
				_this2._onGrow();
			}, 2000);

			setTimeout(function () {
				_reactNativeRouterFlux.Actions.secondScreen();
				_this2.setState({ isLoading: false });
				_this2.buttonAnimated.setValue(0);
				_this2.growAnimated.setValue(0);
			}, 2300);
		}
	}, {
		key: '_onGrow',
		value: function _onGrow() {
			_reactNative.Animated.timing(this.growAnimated, {
				toValue: 1,
				duration: 200,
				easing: _reactNative.Easing.linear
			}).start();
		}
	}, {
		key: 'render',
		value: function render() {
			var changeWidth = this.buttonAnimated.interpolate({
				inputRange: [0, 1],
				outputRange: [DEVICE_WIDTH - MARGIN, MARGIN]
			});
			var changeScale = this.growAnimated.interpolate({
				inputRange: [0, 1],
				outputRange: [1, MARGIN]
			});

			return _react3.default.createElement(
				_reactNative.View,
				{ style: styles.container, __source: {
						fileName: _jsxFileName,
						lineNumber: 85
					}
				},
				_react3.default.createElement(
					_reactNative.Animated.View,
					{ style: { width: changeWidth }, __source: {
							fileName: _jsxFileName,
							lineNumber: 86
						}
					},
					_react3.default.createElement(
						_reactNative.TouchableOpacity,
						{ style: styles.button,
							onPress: this._onPress,
							activeOpacity: 1, __source: {
								fileName: _jsxFileName,
								lineNumber: 87
							}
						},
						this.state.isLoading ? _react3.default.createElement(_reactNative.Image, { source: _loading2.default, style: styles.image, __source: {
								fileName: _jsxFileName,
								lineNumber: 91
							}
						}) : _react3.default.createElement(
							_reactNative.Text,
							{ style: styles.text, __source: {
									fileName: _jsxFileName,
									lineNumber: 93
								}
							},
							'LOGIN'
						)
					),
					_react3.default.createElement(_reactNative.Animated.View, { style: [styles.circle, { transform: [{ scale: changeScale }] }], __source: {
							fileName: _jsxFileName,
							lineNumber: 96
						}
					})
				)
			);
		}
	}]);

	return ButtonSubmit;
}(_react2.Component));

exports.default = ButtonSubmit;


var styles = _reactNative.StyleSheet.create({
	container: {
		flex: 1,
		top: -95,
		alignItems: 'center',
		justifyContent: 'flex-start'
	},
	button: {
		alignItems: 'center',
		justifyContent: 'center',
		backgroundColor: '#F035E0',
		height: MARGIN,
		borderRadius: 20,
		zIndex: 100
	},
	circle: {
		height: MARGIN,
		width: MARGIN,
		marginTop: -MARGIN,
		borderWidth: 1,
		borderColor: '#F035E0',
		borderRadius: 100,
		alignSelf: 'center',
		zIndex: 99,
		backgroundColor: '#F035E0'
	},
	text: {
		color: 'white',
		backgroundColor: 'transparent'
	},
	image: {
		width: 24,
		height: 24
	}
});